// define a variable to import the <Verifier> or <renamedVerifier> solidity contract generated by Zokrates
const Verifier = artifacts.require("./Verifier.sol");
const proof_json = require("../../zokrates/code/square/proof.json");
const truffleAssert = require('truffle-assertions');

// - use the contents from proof.json generated from zokrates steps
const proof_data = {
    "proof": {
        "a": [web3.utils.toBN(proof_json.proof.a[0]).toString(), web3.utils.toBN(proof_json.proof.a[1]).toString()],
        "b": [
            [web3.utils.toBN(proof_json.proof.b[0][0]).toString(), web3.utils.toBN(proof_json.proof.b[0][1]).toString()],
            [web3.utils.toBN(proof_json.proof.b[1][0]).toString(), web3.utils.toBN(proof_json.proof.b[1][1]).toString()]
        ],
        "c": [web3.utils.toBN(proof_json.proof.c[0]).toString(), web3.utils.toBN(proof_json.proof.c[1]).toString()]
    },
    "input": proof_json.inputs
        
}

contract('Verifier', accounts => {
    before(async() => {
        this.verifier = await Verifier.new({from: accounts[0]});
    });

    // Test verification with correct proof
    it('should verify with correct proof', async() => {
        let transferTx = await this.verifier.verifyTx(
            proof_data.proof.a,
            proof_data.proof.b,
            proof_data.proof.c,
            proof_data.input,
            {from: accounts[0]}
        );
        assert.equal(transferTx, true, "Did not verify with incorrect proof" );
    })

    // Test verification with incorrect proof
    it('should not verify with incorrect proof', async() => {
        let transferTx = await this.verifier.verifyTx(
            proof_data.proof.a,
            proof_data.proof.b,
            proof_data.proof.c,
            [18, 2],
            {from: accounts[0]}
        );
        assert.equal(transferTx, false, "Did not verify with incorrect proof" );
    })
})





    

